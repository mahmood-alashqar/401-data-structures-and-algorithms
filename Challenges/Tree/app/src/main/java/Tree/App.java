/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Tree;

import Node.Node;
import kAryTree.KAryTree;

import java.util.ArrayList;
import java.util.List;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
        BinarySearchTree binerySearchTree = new BinarySearchTree();
        binerySearchTree.add(1);
        binerySearchTree.add(3);
        binerySearchTree.add(8);
        binerySearchTree.add(11);
        int sum = 0;
        System.out.println("sum is " + binerySearchTree.addOdd(binerySearchTree.getRoot(), sum));
//       binerySearchTree.inOrder(binerySearchTree.getRoot());
//        BineryTree tree = new BineryTree();
//        tree.setRoot(new Node(2));
//        tree.getRoot().setLeft(new Node(7));
//        tree.getRoot().setRight(new Node(5));
//        tree.getRoot().getLeft().setRight(new Node(6));
//        tree.getRoot().getLeft().getRight().setLeft(new Node(1));
//        tree.getRoot().getLeft().getRight().setRight(new Node(11));
//        tree.getRoot().getRight().setRight(new Node(9));
//        tree.getRoot().getRight().getRight().setLeft(new Node(4));
//        System.out.println("Maximum element is " + tree.findMax());
        List<Integer> list = new ArrayList<>();
        list.add(10);
        list.add(20);
        list.add(3);
        list.add(40);
        list.add(50);
        list.add(60);
        list.add(70);//
        list.add(8);
        list.add(90);
        list.add(30);
        KAryTree<Integer> kAryTree = new KAryTree<>(list, 3);
        kAryTree.postorder(kAryTree.getRoot());
        System.out.println();
        kAryTree.treeFizzBuzz();
        kAryTree.postorder(kAryTree.getRoot());
        //
        BinaryTree<Integer> tree = new BinaryTree();
        tree.setRoot(new Node<Integer>(2));
        tree.getRoot().setLeft(new Node<Integer>(7));
        tree.getRoot().setRight(new Node<Integer>(5));
        tree.getRoot().getLeft().setRight(new Node<Integer>(6));
        tree.getRoot().getLeft().getRight().setLeft(new Node<Integer>(1));
        tree.getRoot().getLeft().getRight().setRight(new Node<Integer>(11));
        tree.getRoot().getRight().setRight(new Node<Integer>(9));
        tree.getRoot().getRight().getRight().setLeft(new Node<Integer>(4));
        System.out.println();
        System.out.println("Breadth First "+ tree.breadthFirst(tree));
    }
}
